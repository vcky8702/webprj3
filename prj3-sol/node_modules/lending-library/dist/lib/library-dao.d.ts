import * as mongo from 'mongodb';
import { Errors } from 'cs544-js-utils';
import * as Lib from './library.js';
type DbBook = Lib.XBook & {
    _id: string;
};
type DbLend = Lib.Lend;
export declare function makeLibraryDao(dbUrl: string): Promise<Errors.Result<LibraryDao>>;
export declare class LibraryDao {
    private readonly client;
    private readonly books;
    private readonly lends;
    constructor(client: mongo.MongoClient, books: mongo.Collection<DbBook>, lends: mongo.Collection<DbLend>);
    static make(dbUrl: string): Promise<Errors.Result<LibraryDao>>;
    /** close off this DAO; implementing object is invalid after
     *  call to close()
     *
     *  Error Codes:
     *    DB: a database error was encountered.
     */
    close(): Promise<Errors.Result<void>>;
    /** add book.
     *  Error Codes:
     *    DB: a database error was encountered.
     */
    addBook(book: Lib.XBook): Promise<Errors.Result<Lib.XBook>>;
    /** retrieve book by isbn.
     *
     *  Error codes:
     *    NOT_FOUND: no book found for isbn
     *    DB: a database error.
     */
    getBook(isbn: string): Promise<Errors.Result<Lib.XBook>>;
    /** return list of all users which match filter.  It is not an error
     *  if no books match.
     *
     *  Error codes:
     *    DB: a database error.
     */
    findBooks(filter: Lib.Find): Promise<Errors.Result<Lib.XBook[]>>;
    updateBookNCopies(isbn: string, nCopies: number): Promise<Errors.Result<void>>;
    /** add Lend.
     *  Error Codes:
     *    DB: a database error was encountered.
     */
    addLend(lend: Lib.Lend): Promise<Errors.Result<Lib.Lend>>;
    /** remove Lend.
     *  Error Codes:
     *    DB: a database error was encountered.
     */
    removeLend(lend: Lib.Lend): Promise<Errors.Result<void>>;
    findAllLendsByIsbn(isbn: string): Promise<Errors.Result<Lib.Lend[]>>;
    findAllLendsByPatronId(patronId: string): Promise<Errors.Result<Lib.Lend[]>>;
    /** clear all data in this DAO.
     *
     *  Error Codes:
     *    DB: a database error was encountered.
     */
    clear(): Promise<Errors.Result<void>>;
}
export {};
//# sourceMappingURL=library-dao.d.ts.map